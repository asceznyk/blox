var NumLiteral = function(x) {
	this.type = 'NumLiteral';
	this.value = Number(x);
}

var StrLiteral = function(x) {
	this.type = 'StrLiteral';
	this.value = String(x);
}

var BoolLiteral = function(x) {
	this.type = 'BoolLiteral';
	this.value = Boolean(x);
}

var Identifier = function(x) {
	this.type = 'Identifier';
	this.name = x;
}

var Definition = function(x) {
	this.type = 'Definition';
	this.name = x;
}

var Bools = ['true', 'false'];
var Keywords = ['def', 'while', 'if', 'else', 'return', 'print'];

function skipSpaceComments(string) {
  string = string.replace((/\#([\s\S]|[\r\n]).+?(?=\#)\#/gsi), '');
  string = string.replace((/\`([\s\S]|[\r\n]).+?(?=\`)\`/gsi), '');
  let first = string.search(/\S/);
	if (first == -1) return "";
	return string.slice(first);
}

function tokenize(program) {
	let match;
	let term;
	if(match = /^[^\s(),#"]+/.exec(program)) {
		term = match[0];
		if(term in Keywords) {
			return new Definition(term);
		} else if(term in Bools) {
			return new BoolLiteral(term);
		}
		return new Identifier(term);	
	} else if (match = /^"([^"]*)"/.exec(program))
}

function lexer(program) {
	program = skipSpaceComments(program);

	let tokens = [];
	while(true) {
		//tokens.push(tokenize(program));
		//skip = program.search(/\S/);
		if(skip == -1) break
		let term = program.slice(skip);
		program = program.slice(skip+1);
		console.log(term, '--', program);
	}


	return tokens;
}


